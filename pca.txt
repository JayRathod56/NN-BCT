import numpy as np 

  

def PCA(X , num_components): 

      

    #Step-1 

    X_meaned = X - np.mean(X , axis = 0) 

      

    #Step-2 

    cov_mat = np.cov(X_meaned , rowvar = False) 

      

    #Step-3 

    eigen_values , eigen_vectors = np.linalg.eigh(cov_mat) 

      

    #Step-4 

    sorted_index = np.argsort(eigen_values)[::-1] 

    sorted_eigenvalue = eigen_values[sorted_index] 

    sorted_eigenvectors = eigen_vectors[:,sorted_index] 

      

    #Step-5 

    eigenvector_subset = sorted_eigenvectors[:,0:num_components] 

      

    #Step-6 

    X_reduced = np.dot(eigenvector_subset.transpose() , X_meaned.transpose() ).transpose() 

      

    return X_reduced 

 

 

import pandas as pd 

from sklearn.datasets import load_iris 

  

#loading the data 

X, y = load_iris(return_X_y = True) 

  

#Applying it to PCA function 

mat_reduced = PCA(X , 2) 

  

#Creating a Pandas DataFrame of reduced Dataset 

principal_df = pd.DataFrame(mat_reduced , columns = ['PC1','PC2']) 

  

#Concat it with target variable to create a complete Dataset 

principal_df = pd.concat([principal_df , pd.DataFrame(y)] , axis = 1) 

 

 

# Visualizing 3-D numeric data with Scatter Plots 

# length, breadth and depth 

fig = plt.figure(figsize=(8, 6)) 

ax = fig.add_subplot(111, projection='3d') 

 
 

xs = X[:, 0] 

ys = X[:, 1] 

zs = X[:, 2] 

ax.scatter(xs, ys, zs, s=50, alpha=0.6, edgecolors='b') 

 
 

ax.set_xlabel('Petal Length') 

ax.set_ylabel('Petal Width') 

ax.set_zlabel('Sepal Length') 

 

 

import seaborn as sb 

import matplotlib.pyplot as plt 

  

plt.figure(figsize = (6,6)) 

sb.scatterplot(data = principal_df , x = 'PC1',y = 'PC2' , hue = y , s = 60 , palette= 'icefire') 

 
